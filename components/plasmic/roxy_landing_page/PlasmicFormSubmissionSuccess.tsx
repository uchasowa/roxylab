// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5Zg9n9VVQm3GpGMqm4vDHh
// Component: m9q_ylkcXKJb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import LavenderButton from "../../LavenderButton"; // plasmic-import: MtQHjkr4cOvA/component
import Button from "../../Button"; // plasmic-import: ll3hHBC03oBt/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5Zg9n9VVQm3GpGMqm4vDHh/projectcss
import sty from "./PlasmicFormSubmissionSuccess.module.css"; // plasmic-import: m9q_ylkcXKJb/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: W-5X1QmV8pcj/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fHRKrUX_kYZ3/icon
import IconParkTwotoneSuccessSvgIcon from "./icons/PlasmicIcon__IconParkTwotoneSuccessSvg"; // plasmic-import: Bw6f6MMDqK9o/icon

createPlasmicElementProxy;

export type PlasmicFormSubmissionSuccess__VariantMembers = {};
export type PlasmicFormSubmissionSuccess__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormSubmissionSuccess__VariantsArgs;
export const PlasmicFormSubmissionSuccess__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFormSubmissionSuccess__ArgsType = {};
type ArgPropType = keyof PlasmicFormSubmissionSuccess__ArgsType;
export const PlasmicFormSubmissionSuccess__ArgProps = new Array<ArgPropType>();

export type PlasmicFormSubmissionSuccess__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  lavenderButton?: Flex__<typeof LavenderButton>;
  svg?: Flex__<"svg">;
  h1?: Flex__<"h1">;
  button?: Flex__<typeof Button>;
};

export interface DefaultFormSubmissionSuccessProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormSubmissionSuccess__RenderFunc(props: {
  variants: PlasmicFormSubmissionSuccess__VariantsArgs;
  args: PlasmicFormSubmissionSuccess__ArgsType;
  overrides: PlasmicFormSubmissionSuccess__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicFormSubmissionSuccess.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFormSubmissionSuccess.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFormSubmissionSuccess.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox___9Niy8)}>
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__jbnk)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/roxy_landing_page/images/frame70Png.png",
                    fullWidth: 128,
                    fullHeight: 45,
                    aspectRatio: undefined
                  }}
                />
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___9TmRm)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <LavenderButton
                data-plasmic-name={"lavenderButton"}
                data-plasmic-override={overrides.lavenderButton}
                className={classNames("__wab_instance", sty.lavenderButton)}
                transparent={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qwFq7
                  )}
                >
                  {"Contact Us"}
                </div>
              </LavenderButton>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__epQqA)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <div className={classNames(projectcss.all, sty.freeBox__yldph)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dfw9W)}
            >
              <IconParkTwotoneSuccessSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {
                  "We received your details. We will send you report by your email!"
                }
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9CSef
                )}
              >
                {
                  "We have received your submitted details. We will check those details and create report and send that to your email address. If you want to check status, please press check status button"
                }
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              >
                {"Check Status"}
              </Button>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "link",
    "lavenderButton",
    "svg",
    "h1",
    "button"
  ],
  navigationBar: ["navigationBar", "link", "lavenderButton"],
  link: ["link"],
  lavenderButton: ["lavenderButton"],
  svg: ["svg"],
  h1: ["h1"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  link: "a";
  lavenderButton: typeof LavenderButton;
  svg: "svg";
  h1: "h1";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormSubmissionSuccess__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormSubmissionSuccess__VariantsArgs;
    args?: PlasmicFormSubmissionSuccess__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormSubmissionSuccess__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFormSubmissionSuccess__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormSubmissionSuccess__ArgProps,
          internalVariantPropNames: PlasmicFormSubmissionSuccess__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormSubmissionSuccess__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormSubmissionSuccess";
  } else {
    func.displayName = `PlasmicFormSubmissionSuccess.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "5Zg9n9VVQm3GpGMqm4vDHh"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicFormSubmissionSuccess = Object.assign(
  // Top-level PlasmicFormSubmissionSuccess renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    link: makeNodeComponent("link"),
    lavenderButton: makeNodeComponent("lavenderButton"),
    svg: makeNodeComponent("svg"),
    h1: makeNodeComponent("h1"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicFormSubmissionSuccess
    internalVariantProps: PlasmicFormSubmissionSuccess__VariantProps,
    internalArgProps: PlasmicFormSubmissionSuccess__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "We received your Form",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFormSubmissionSuccess;
/* prettier-ignore-end */
