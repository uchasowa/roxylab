// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5Zg9n9VVQm3GpGMqm4vDHh
// Component: IF154tGolFVA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import LavenderButton from "../../LavenderButton"; // plasmic-import: MtQHjkr4cOvA/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: ZRml-k__Ofyf/component
import Select from "../../Select"; // plasmic-import: vycrmcvmfIp5/component
import Button from "../../Button"; // plasmic-import: ll3hHBC03oBt/component
import DarkTealButton from "../../DarkTealButton"; // plasmic-import: w2Fc-Ixm_xfi/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5Zg9n9VVQm3GpGMqm4vDHh/projectcss
import sty from "./PlasmicPatientForm.module.css"; // plasmic-import: IF154tGolFVA/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: W-5X1QmV8pcj/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fHRKrUX_kYZ3/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: iRRgIrxUQ5s9/icon
import IconParkTwotoneSuccessSvgIcon from "./icons/PlasmicIcon__IconParkTwotoneSuccessSvg"; // plasmic-import: Bw6f6MMDqK9o/icon

createPlasmicElementProxy;

export type PlasmicPatientForm__VariantMembers = {};
export type PlasmicPatientForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicPatientForm__VariantsArgs;
export const PlasmicPatientForm__VariantProps = new Array<VariantPropType>();

export type PlasmicPatientForm__ArgsType = {
  value?: string;
};
type ArgPropType = keyof PlasmicPatientForm__ArgsType;
export const PlasmicPatientForm__ArgProps = new Array<ArgPropType>("value");

export type PlasmicPatientForm__OverridesType = {
  root?: Flex__<"div">;
  leftSide?: Flex__<"section">;
  topBar?: Flex__<"div">;
  progress?: Flex__<"div">;
  phaseProgress?: Flex__<typeof AntdProgress>;
  form?: Flex__<"form">;
  formMain?: Flex__<typeof FormWrapper>;
  p1?: Flex__<"form">;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  select?: Flex__<typeof Select>;
  p2?: Flex__<"form">;
  textInput3?: Flex__<typeof TextInput>;
  select2?: Flex__<typeof Select>;
  p3?: Flex__<"form">;
  select3?: Flex__<typeof Select>;
  textInput4?: Flex__<typeof TextInput>;
  p4?: Flex__<"form">;
  select4?: Flex__<typeof Select>;
  textInput5?: Flex__<typeof TextInput>;
  p5?: Flex__<"form">;
  textInput6?: Flex__<typeof TextInput>;
  select5?: Flex__<typeof Select>;
  p6?: Flex__<"form">;
  textInput7?: Flex__<typeof TextInput>;
  select6?: Flex__<typeof Select>;
  rightSide?: Flex__<"section">;
  navigationBar?: Flex__<typeof NavigationBar>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  svg?: Flex__<"svg">;
};

export interface DefaultPatientFormProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPatientForm__RenderFunc(props: {
  variants: PlasmicPatientForm__VariantsArgs;
  args: PlasmicPatientForm__ArgsType;
  overrides: PlasmicPatientForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "currentPhase",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "totalPhaseNum",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return Math.max(
                ...$queries.roxySupabase.data.map(item =>
                  parseInt(item.phaseNo, 10)
                )
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })()
      },
      {
        path: "formMain.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formMain",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formMain.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formMain",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput4[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput5[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select4[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput6[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select5[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput7[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select6[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "pageStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "submitionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const defaultValue = "1000001";
                const matchingObject = $queries.query.data.find(
                  obj => obj.id === defaultValue
                );
                if (matchingObject) {
                  const highestId = Math.max(
                    ...$queries.query.data.map(obj => parseInt(obj.id))
                  );
                  return (highestId + 1)
                    .toString()
                    .padStart(defaultValue.length, "0");
                } else {
                  return defaultValue;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    roxySupabase: usePlasmicDataOp(() => {
      return {
        sourceId: "sDrfqxHKPPovJA6Dwf86Xj",
        opId: "4d73220a-49b6-4530-a010-33efbf2794a2",
        userArgs: {},
        cacheKey: `plasmic.$.4d73220a-49b6-4530-a010-33efbf2794a2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "sDrfqxHKPPovJA6Dwf86Xj",
        opId: "e0700a64-2aca-4c42-86af-77194c5d1e2e",
        userArgs: {},
        cacheKey: `plasmic.$.e0700a64-2aca-4c42-86af-77194c5d1e2e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        {(() => {
          try {
            return $state.pageStep == "0";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox___7NFhQ)}>
            <section
              data-plasmic-name={"leftSide"}
              data-plasmic-override={overrides.leftSide}
              className={classNames(projectcss.all, sty.leftSide)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"topBar"}
                data-plasmic-override={overrides.topBar}
                hasGap={true}
                className={classNames(projectcss.all, sty.topBar)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uaQzB)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/roxy_landing_page/images/logoPng.png",
                    fullWidth: 51,
                    fullHeight: 51,
                    aspectRatio: undefined
                  }}
                />

                <LavenderButton
                  className={classNames(
                    "__wab_instance",
                    sty.lavenderButton__hul
                  )}
                  link={`/`}
                  transparent={true}
                >
                  {"\u2190Go Back"}
                </LavenderButton>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"progress"}
                data-plasmic-override={overrides.progress}
                hasGap={true}
                className={classNames(projectcss.all, sty.progress)}
              >
                <AntdProgress
                  data-plasmic-name={"phaseProgress"}
                  data-plasmic-override={overrides.phaseProgress}
                  className={classNames("__wab_instance", sty.phaseProgress)}
                  percent={(() => {
                    try {
                      return ($state.currentPhase / $state.totalPhaseNum) * 100;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  showInfo={false}
                  strokeColor={true ? "#191970" : undefined}
                  strokeWidth={(() => {
                    try {
                      return $state.totalPhaseNum;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  successStrokeColor={true ? "#191970" : undefined}
                  trailColor={true ? "#F5F5FF" : undefined}
                />
              </Stack__>
              <form
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                className={classNames(projectcss.all, sty.form)}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.formMain),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["formMain", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["formMain", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["formMain"] = ref;
                    },
                    submitSlot: null,
                    validateTrigger: [],
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "formMain.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "formMain.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"formMain"}
                      data-plasmic-override={overrides.formMain}
                      {...child$Props}
                    >
                      {(() => {
                        try {
                          return $state.currentPhase == "1";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <form
                          data-plasmic-name={"p1"}
                          data-plasmic-override={overrides.p1}
                          className={classNames(projectcss.all, sty.p1, "P1")}
                          id={"P1"}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "1" &&
                                    item.input_type === "text"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField___6Z35C
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textInput
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    },
                                    placeholder: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    required: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value:
                                      generateStateValueProp($state, [
                                        "textInput",
                                        __plasmic_idx_0,
                                        "value"
                                      ]) ?? ""
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "textInput[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => ""
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <TextInput
                                      data-plasmic-name={"textInput"}
                                      data-plasmic-override={
                                        overrides.textInput
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "1" &&
                                    item.input_type === "number"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__rL23D
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textInput2
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput2",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    },
                                    placeholder: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    required: (() => {
                                      try {
                                        return currentItem.is_required;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    type: "number",
                                    value:
                                      generateStateValueProp($state, [
                                        "textInput2",
                                        __plasmic_idx_0,
                                        "value"
                                      ]) ?? ""
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "textInput2[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => ""
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <TextInput
                                      data-plasmic-name={"textInput2"}
                                      data-plasmic-override={
                                        overrides.textInput2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "1" &&
                                    item.input_type === "select"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__kPhGw
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Message";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    },
                                    options: (() => {
                                      try {
                                        return currentItem.options.map(s => ({
                                          type: "item",
                                          label: s,
                                          value: s
                                        }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value: generateStateValueProp($state, [
                                      "select",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Select
                                      data-plasmic-name={"select"}
                                      data-plasmic-override={overrides.select}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6FNpA
                            )}
                          >
                            <LavenderButton
                              className={classNames(
                                "__wab_instance",
                                sty.lavenderButton___3D0Vg
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue - 1
                                        );
                                        return oldValue - 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qXf2B
                                )}
                              >
                                {"Previous"}
                              </div>
                            </LavenderButton>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__jjXe
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                              submitsForm={false}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jyL0N
                                )}
                              >
                                {"Next"}
                              </div>
                            </Button>
                            <DarkTealButton
                              className={classNames(
                                "__wab_instance",
                                sty.darkTealButton__jkRu
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gCbJg
                                )}
                              >
                                {"Done"}
                              </div>
                            </DarkTealButton>
                          </Stack__>
                        </form>
                      ) : null}
                      {(() => {
                        try {
                          return $state.currentPhase == "2";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <form
                          data-plasmic-name={"p2"}
                          data-plasmic-override={overrides.p2}
                          className={classNames(projectcss.all, sty.p2)}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "2" &&
                                    item.input_type === "text"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__az1Uw
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textInput3
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput3",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    },
                                    placeholder: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    required: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value:
                                      generateStateValueProp($state, [
                                        "textInput3",
                                        __plasmic_idx_0,
                                        "value"
                                      ]) ?? ""
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "textInput3[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => ""
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <TextInput
                                      data-plasmic-name={"textInput3"}
                                      data-plasmic-override={
                                        overrides.textInput3
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "2" &&
                                    item.input_type === "select"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__n8Hl
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Message";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select2
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select2",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    },
                                    options: (() => {
                                      try {
                                        return currentItem.options.map(s => ({
                                          type: "item",
                                          label: s,
                                          value: s
                                        }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value: generateStateValueProp($state, [
                                      "select2",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select2[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Select
                                      data-plasmic-name={"select2"}
                                      data-plasmic-override={overrides.select2}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jsK7U
                            )}
                          >
                            <LavenderButton
                              className={classNames(
                                "__wab_instance",
                                sty.lavenderButton__jPAl
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue - 1
                                        );
                                        return oldValue - 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ihi5
                                )}
                              >
                                {"Previous"}
                              </div>
                            </LavenderButton>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__q8Uqh
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__t5Wp9
                                )}
                              >
                                {"Next"}
                              </div>
                            </Button>
                            <DarkTealButton
                              className={classNames(
                                "__wab_instance",
                                sty.darkTealButton__bmpuF
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__n20Ro
                                )}
                              >
                                {"Done"}
                              </div>
                            </DarkTealButton>
                          </Stack__>
                        </form>
                      ) : null}
                      {(() => {
                        try {
                          return $state.currentPhase == "3";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <form
                          data-plasmic-name={"p3"}
                          data-plasmic-override={overrides.p3}
                          className={classNames(projectcss.all, sty.p3)}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "3" &&
                                    item.input_type === "select"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__fpcc4
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Message";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select3
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select3",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    },
                                    options: (() => {
                                      try {
                                        return currentItem.options.map(s => ({
                                          type: "item",
                                          label: s,
                                          value: s
                                        }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value: generateStateValueProp($state, [
                                      "select3",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select3[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Select
                                      data-plasmic-name={"select3"}
                                      data-plasmic-override={overrides.select3}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "3" &&
                                    item.input_type === "text"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__dciiW
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textInput4
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput4",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    },
                                    placeholder: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    required: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value:
                                      generateStateValueProp($state, [
                                        "textInput4",
                                        __plasmic_idx_0,
                                        "value"
                                      ]) ?? ""
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "textInput4[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => ""
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <TextInput
                                      data-plasmic-name={"textInput4"}
                                      data-plasmic-override={
                                        overrides.textInput4
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__djWwM
                            )}
                          >
                            <LavenderButton
                              className={classNames(
                                "__wab_instance",
                                sty.lavenderButton__j9FOz
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue - 1
                                        );
                                        return oldValue - 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nbvmO
                                )}
                              >
                                {"Previous"}
                              </div>
                            </LavenderButton>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__bjOp2
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0Qc4E
                                )}
                              >
                                {"Next"}
                              </div>
                            </Button>
                            <DarkTealButton
                              className={classNames(
                                "__wab_instance",
                                sty.darkTealButton__i4TS0
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kJpR0
                                )}
                              >
                                {"Done"}
                              </div>
                            </DarkTealButton>
                          </Stack__>
                        </form>
                      ) : null}
                      {(() => {
                        try {
                          return $state.currentPhase == "4";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <form
                          data-plasmic-name={"p4"}
                          data-plasmic-override={overrides.p4}
                          className={classNames(projectcss.all, sty.p4)}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "4" &&
                                    item.input_type === "select"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__qtQcS
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Message";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select4
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select4",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    },
                                    options: (() => {
                                      try {
                                        return currentItem.options.map(s => ({
                                          type: "item",
                                          label: s,
                                          value: s
                                        }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value: generateStateValueProp($state, [
                                      "select4",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select4[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Select
                                      data-plasmic-name={"select4"}
                                      data-plasmic-override={overrides.select4}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "4" &&
                                    item.input_type === "text"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__whD95
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textInput5
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput5",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    },
                                    placeholder: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    required: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value:
                                      generateStateValueProp($state, [
                                        "textInput5",
                                        __plasmic_idx_0,
                                        "value"
                                      ]) ?? ""
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "textInput5[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => ""
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <TextInput
                                      data-plasmic-name={"textInput5"}
                                      data-plasmic-override={
                                        overrides.textInput5
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__udHmV
                            )}
                          >
                            <LavenderButton
                              className={classNames(
                                "__wab_instance",
                                sty.lavenderButton__rH3Ur
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue - 1
                                        );
                                        return oldValue - 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cXfQ5
                                )}
                              >
                                {"Previous"}
                              </div>
                            </LavenderButton>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__iBAfv
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vT2N
                                )}
                              >
                                {"Next"}
                              </div>
                            </Button>
                            <DarkTealButton
                              className={classNames(
                                "__wab_instance",
                                sty.darkTealButton__i3Ls
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xvKlx
                                )}
                              >
                                {"Done"}
                              </div>
                            </DarkTealButton>
                          </Stack__>
                        </form>
                      ) : null}
                      {(() => {
                        try {
                          return $state.currentPhase == "5";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <form
                          data-plasmic-name={"p5"}
                          data-plasmic-override={overrides.p5}
                          className={classNames(projectcss.all, sty.p5)}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "5" &&
                                    item.input_type === "text"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__eWfnz
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textInput6
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput6",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    },
                                    placeholder: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    required: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value:
                                      generateStateValueProp($state, [
                                        "textInput6",
                                        __plasmic_idx_0,
                                        "value"
                                      ]) ?? ""
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "textInput6[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => ""
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <TextInput
                                      data-plasmic-name={"textInput6"}
                                      data-plasmic-override={
                                        overrides.textInput6
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "5" &&
                                    item.input_type === "select"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__hU3G
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Message";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select5
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select5",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    },
                                    options: (() => {
                                      try {
                                        return currentItem.options.map(s => ({
                                          type: "item",
                                          label: s,
                                          value: s
                                        }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value: generateStateValueProp($state, [
                                      "select5",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select5[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Select
                                      data-plasmic-name={"select5"}
                                      data-plasmic-override={overrides.select5}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o5S6P
                            )}
                          >
                            <LavenderButton
                              className={classNames(
                                "__wab_instance",
                                sty.lavenderButton__t6UAd
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue - 1
                                        );
                                        return oldValue - 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dy5Yh
                                )}
                              >
                                {"Previous"}
                              </div>
                            </LavenderButton>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__j4VaJ
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__a5ACp
                                )}
                              >
                                {"Next"}
                              </div>
                            </Button>
                            <DarkTealButton
                              className={classNames(
                                "__wab_instance",
                                sty.darkTealButton__jtobX
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3Y41W
                                )}
                              >
                                {"Done"}
                              </div>
                            </DarkTealButton>
                          </Stack__>
                        </form>
                      ) : null}
                      {(() => {
                        try {
                          return $state.currentPhase == "6";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <form
                          data-plasmic-name={"p6"}
                          data-plasmic-override={overrides.p6}
                          className={classNames(projectcss.all, sty.p6)}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "6" &&
                                    item.input_type === "text"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__kfKkn
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textInput7
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput7",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    },
                                    placeholder: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    required: (() => {
                                      try {
                                        return currentItem.placeholder;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value:
                                      generateStateValueProp($state, [
                                        "textInput7",
                                        __plasmic_idx_0,
                                        "value"
                                      ]) ?? ""
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "textInput7[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => ""
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <TextInput
                                      data-plasmic-name={"textInput7"}
                                      data-plasmic-override={
                                        overrides.textInput7
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.roxySupabase.data.filter(
                                  item =>
                                    item.phaseNo === "6" &&
                                    item.input_type === "select"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__xrIUq
                                )}
                                key={currentIndex}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.question_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Message";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={`${currentItem.id}.${currentItem.question_text}`}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select6
                                    ),
                                    onChange: (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select6",
                                        __plasmic_idx_0,
                                        "value"
                                      ])(eventArgs[0]);
                                    },
                                    options: (() => {
                                      try {
                                        return currentItem.options.map(s => ({
                                          type: "item",
                                          label: s,
                                          value: s
                                        }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value: generateStateValueProp($state, [
                                      "select6",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select6[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Select
                                      data-plasmic-name={"select6"}
                                      data-plasmic-override={overrides.select6}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___46I7B
                            )}
                          >
                            <LavenderButton
                              className={classNames(
                                "__wab_instance",
                                sty.lavenderButton__yhA44
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue - 1
                                        );
                                        return oldValue - 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__epRz8
                                )}
                              >
                                {"Previous"}
                              </div>
                            </LavenderButton>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button___2ULh1
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentPhase"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentPhase"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentPhase"] != null &&
                                  typeof $steps["updateCurrentPhase"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentPhase"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentPhase"] = await $steps[
                                    "updateCurrentPhase"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yOp74
                                )}
                              >
                                {"Next"}
                              </div>
                            </Button>
                            <DarkTealButton
                              className={classNames(
                                "__wab_instance",
                                sty.darkTealButton__cxN3V
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["step"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "sDrfqxHKPPovJA6Dwf86Xj",
                                          opId: "b963dffe-fbb1-4b7c-aed7-57e81e7824b7",
                                          userArgs: {
                                            variables: [
                                              $state.submitionId,
                                              $state.formMain.value
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["step"] != null &&
                                  typeof $steps["step"] === "object" &&
                                  typeof $steps["step"].then === "function"
                                ) {
                                  $steps["step"] = await $steps["step"];
                                }

                                $steps["updatePageStep"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["pageStep"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updatePageStep"] != null &&
                                  typeof $steps["updatePageStep"] ===
                                    "object" &&
                                  typeof $steps["updatePageStep"].then ===
                                    "function"
                                ) {
                                  $steps["updatePageStep"] = await $steps[
                                    "updatePageStep"
                                  ];
                                }
                              }}
                              submitsForm={false}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cvTd5
                                )}
                              >
                                {"Done"}
                              </div>
                            </DarkTealButton>
                          </Stack__>
                        </form>
                      ) : null}
                    </FormWrapper>
                  );
                })()}
              </form>
            </section>
            <section
              data-plasmic-name={"rightSide"}
              data-plasmic-override={overrides.rightSide}
              className={classNames(projectcss.all, sty.rightSide)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___6FuV
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        switch ($state.currentPhase) {
                          case 1:
                            return "Getting to Know You";
                          case 2:
                            return "Understanding Your Health";
                          case 3:
                            return "Your Medications and Treatments";
                          case 4:
                            return "Your Lifestyle and Habits";
                          case 5:
                            return "Your Challenges and Concerns";
                          case 6:
                            return "Next Steps & Support";
                          default:
                            return "";
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You won't believe what happens next.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h1>
            </section>
          </div>
        ) : null}
        {(() => {
          try {
            return $state.pageStep == "1";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__mRpTd)}>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___3TtW9)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/roxy_landing_page/images/frame70Png.png",
                      fullWidth: 128,
                      fullHeight: 45,
                      aspectRatio: undefined
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__b6FqO)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/close.svg"}
                />
              }
              itemsGap={8}
              menuItems={
                <LavenderButton
                  className={classNames(
                    "__wab_instance",
                    sty.lavenderButton__fjj44
                  )}
                  transparent={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2ABv8
                    )}
                  >
                    {"Contact Us"}
                  </div>
                </LavenderButton>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mjPjo)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/menu.svg"}
                />
              }
              responsiveBreakpoint={768}
            />

            <div className={classNames(projectcss.all, sty.freeBox__z8W8O)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5Ct8E)}
              >
                <IconParkTwotoneSuccessSvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__ngjsu
                  )}
                >
                  {
                    "We received your details. We will send you report by your email!"
                  }
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hm4Hl
                  )}
                >
                  {
                    "We have received your submitted details. We will check those details and create report and send that to your email address. If you want to check status, please press check status button"
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__eSv90)}
                >
                  {"Check Status"}
                </Button>
              </Stack__>
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftSide",
    "topBar",
    "progress",
    "phaseProgress",
    "form",
    "formMain",
    "p1",
    "textInput",
    "textInput2",
    "select",
    "p2",
    "textInput3",
    "select2",
    "p3",
    "select3",
    "textInput4",
    "p4",
    "select4",
    "textInput5",
    "p5",
    "textInput6",
    "select5",
    "p6",
    "textInput7",
    "select6",
    "rightSide",
    "navigationBar",
    "link",
    "svg"
  ],
  leftSide: [
    "leftSide",
    "topBar",
    "progress",
    "phaseProgress",
    "form",
    "formMain",
    "p1",
    "textInput",
    "textInput2",
    "select",
    "p2",
    "textInput3",
    "select2",
    "p3",
    "select3",
    "textInput4",
    "p4",
    "select4",
    "textInput5",
    "p5",
    "textInput6",
    "select5",
    "p6",
    "textInput7",
    "select6"
  ],
  topBar: ["topBar"],
  progress: ["progress", "phaseProgress"],
  phaseProgress: ["phaseProgress"],
  form: [
    "form",
    "formMain",
    "p1",
    "textInput",
    "textInput2",
    "select",
    "p2",
    "textInput3",
    "select2",
    "p3",
    "select3",
    "textInput4",
    "p4",
    "select4",
    "textInput5",
    "p5",
    "textInput6",
    "select5",
    "p6",
    "textInput7",
    "select6"
  ],
  formMain: [
    "formMain",
    "p1",
    "textInput",
    "textInput2",
    "select",
    "p2",
    "textInput3",
    "select2",
    "p3",
    "select3",
    "textInput4",
    "p4",
    "select4",
    "textInput5",
    "p5",
    "textInput6",
    "select5",
    "p6",
    "textInput7",
    "select6"
  ],
  p1: ["p1", "textInput", "textInput2", "select"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  select: ["select"],
  p2: ["p2", "textInput3", "select2"],
  textInput3: ["textInput3"],
  select2: ["select2"],
  p3: ["p3", "select3", "textInput4"],
  select3: ["select3"],
  textInput4: ["textInput4"],
  p4: ["p4", "select4", "textInput5"],
  select4: ["select4"],
  textInput5: ["textInput5"],
  p5: ["p5", "textInput6", "select5"],
  textInput6: ["textInput6"],
  select5: ["select5"],
  p6: ["p6", "textInput7", "select6"],
  textInput7: ["textInput7"],
  select6: ["select6"],
  rightSide: ["rightSide"],
  navigationBar: ["navigationBar", "link"],
  link: ["link"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftSide: "section";
  topBar: "div";
  progress: "div";
  phaseProgress: typeof AntdProgress;
  form: "form";
  formMain: typeof FormWrapper;
  p1: "form";
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  select: typeof Select;
  p2: "form";
  textInput3: typeof TextInput;
  select2: typeof Select;
  p3: "form";
  select3: typeof Select;
  textInput4: typeof TextInput;
  p4: "form";
  select4: typeof Select;
  textInput5: typeof TextInput;
  p5: "form";
  textInput6: typeof TextInput;
  select5: typeof Select;
  p6: "form";
  textInput7: typeof TextInput;
  select6: typeof Select;
  rightSide: "section";
  navigationBar: typeof NavigationBar;
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPatientForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPatientForm__VariantsArgs;
    args?: PlasmicPatientForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPatientForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPatientForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPatientForm__ArgProps,
          internalVariantPropNames: PlasmicPatientForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPatientForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPatientForm";
  } else {
    func.displayName = `PlasmicPatientForm.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "5Zg9n9VVQm3GpGMqm4vDHh"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPatientForm = Object.assign(
  // Top-level PlasmicPatientForm renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    leftSide: makeNodeComponent("leftSide"),
    topBar: makeNodeComponent("topBar"),
    progress: makeNodeComponent("progress"),
    phaseProgress: makeNodeComponent("phaseProgress"),
    form: makeNodeComponent("form"),
    formMain: makeNodeComponent("formMain"),
    p1: makeNodeComponent("p1"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    select: makeNodeComponent("select"),
    p2: makeNodeComponent("p2"),
    textInput3: makeNodeComponent("textInput3"),
    select2: makeNodeComponent("select2"),
    p3: makeNodeComponent("p3"),
    select3: makeNodeComponent("select3"),
    textInput4: makeNodeComponent("textInput4"),
    p4: makeNodeComponent("p4"),
    select4: makeNodeComponent("select4"),
    textInput5: makeNodeComponent("textInput5"),
    p5: makeNodeComponent("p5"),
    textInput6: makeNodeComponent("textInput6"),
    select5: makeNodeComponent("select5"),
    p6: makeNodeComponent("p6"),
    textInput7: makeNodeComponent("textInput7"),
    select6: makeNodeComponent("select6"),
    rightSide: makeNodeComponent("rightSide"),
    navigationBar: makeNodeComponent("navigationBar"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPatientForm
    internalVariantProps: PlasmicPatientForm__VariantProps,
    internalArgProps: PlasmicPatientForm__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPatientForm;
/* prettier-ignore-end */
